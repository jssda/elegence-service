<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- classPathEntry:数据库的JDBC驱动的jar包地址-->
    <!--<classPathEntry location="D:\IDEA_Demo\SSMDemo\lib\mysql-connector-java-5.1.25-bin.jar"/>-->

    <context id="DB2Tables" targetRuntime="MyBatis3">
        <!--序列化插件-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

        <!--自定义插件-->
        <plugin type="pers.jssd.test.mybatis.LombokPlugin">
            <property name="builder" value=""/>
        </plugin>

        <commentGenerator>
            <!-- 是否去除自动生成的日期 true：是 ： false:否 -->
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 在生成的实体类中附带表字段的注释  MBG1.3.3中新增的功能 -->
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>
        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://rm-bp17rs6x3634h47kkdo.mysql.rds.aliyuncs.com:3306/jssdmysql"
                        userId="lab_286338407"
                        password="75062e1cf53c_#@Aa">
            <property name="nullCatalogMeansCurrent" value="true"/>
            <property name="serverTimezone" value="GMT"/>
        </jdbcConnection>

        <!--
          true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
            false：默认,
               scale>0;length>18：使用BigDecimal;
               scale=0;length[10,18]：使用Long；
               scale=0;length[5,9]：使用Integer；
               scale=0;length<5：使用Short；
         -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- java模型创建器，是必须要的元素
           负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
           targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
           targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
        -->
        <javaModelGenerator targetPackage="pers.jssd.test.pojo" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
            <!-- 从数据库返回的值被清理前后的空格  -->
            <property name="trimStrings" value="true"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="true"/>
        </javaModelGenerator>

        <!-- 生成映射文件mapper接口的包名和位置 targetPackage 改为你对应的 dao 位置-->
        <sqlMapGenerator targetPackage="pers.jssd.test.mapper" targetProject="src/main/java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--生成mapper接口、mapper.xml类存放位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="pers.jssd.test.mapper" targetProject="src/main/java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!--
        schema即为数据库名, tableName为数据库中的对应的数据库表名或视图名, domainObjectName是要生成的实体类名,
        如果想要mapper配置文件加入sql的where条件查询, 可以将enableCountByExample等设为true,
        这样就会生成一个对应domainObjectName的Example类, enableCountByExample等设为false时,
        就不会生成对应的Example类了.

        table其他属性：
        enableCountByExample="false"
        enableUpdateByExample="false"
        enableDeleteByExample="false"
        enableSelectByExample="false"
        selectByExampleQueryId="false"

        如果table里边不配置property，默认字段都生成为类属性。
        <ignoreColumn column="FRED" />//忽略字段
        <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />//无论字段是什么类型，生成的类属性都是varchar。
        -->
        <!--<table tableName="email" enableCountByExample="true" catalog="ssm_email" schema=""
               enableUpdateByExample="true" enableDeleteByExample="true"
               enableSelectByExample="true" selectByExampleQueryId="true">
            <generatedKey column="eid" sqlStatement="mysql"/>
        </table>

        <table tableName="user" enableCountByExample="true" catalog="ssm_email" schema=""
               enableUpdateByExample="true" enableDeleteByExample="true"
               enableSelectByExample="true" selectByExampleQueryId="true">
            <generatedKey column="uid" sqlStatement="mysql"/>
        </table>-->
        <table tableName="students">
            <!--insert返回id-->
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
            <columnOverride property="clazz" column="class"/>
        </table>
    </context>

</generatorConfiguration>